#============================================================
# rtc.conf settings example
#
# See details in the following reference manual on the web page or the
# following documents.
#
# English reference:  https://openrtm.org/openrtm/en/rtc_conf_reference
# Japanese reference: https://openrtm.org/openrtm/ja/rtc_conf_reference
#
#============================================================
# Set your nameserver address (localhost:2809 is default)
#corba.nameservers: localhost, 192.168.0.1:2800, otherhost, ...

# If you have two or more network interfaces, try this setting
#   Interface with address 192.168.0.5 is mainly used. 
#corba.endpoints: 192.168.0.5

# Select logger function: YES is default
#logger.enable: YES

# Set log level: INFO is defalut
#logger.log_level: DEBUG

# The following setting names unique RTC name on nameserver
#   RTC numbering is performed globally on nameserver
#manager.components.naming_policy: ns_unique

# Component pre-creation and pre-activation
#   If you want to create an additional instance of the RTC
#manager.components.precreate: RaspberryPiMouseRTC
#   If you want to activate #0 instance
#manager.components.preactivation: RaspberryPiMouseRTC0
# Creating connection previously
#manager.components.preconnect:   ¥
#  <comp0 name>.<port name>?      ¥
#  port=<comp1 name>.<port name>& ¥
#  dataflow_type=push&            ¥
#  interface_type=corba_cdr

# Execution contexts rate [Hz] setting
#exec_cxt.periodic.rate: 30

# RTC's state transition timeout setting 
#exec_cxt.transition_timeout: 5.0

# Component specific configruation files:
#   If you want to load component specific configuration file, please
#   uncomment the following line.
#
# MobileRobot.RaspberryPiMouseRTC.config_file: RaspberryPiMouseRTC.conf
# or
# MobileRobot.RaspberryPiMouseRTC0.config_file: RaspberryPiMouseRTC0.conf
# MobileRobot.RaspberryPiMouseRTC1.config_file: RaspberryPiMouseRTC1.conf
# MobileRobot.RaspberryPiMouseRTC2.config_file: RaspberryPiMouseRTC2.conf
# See below for more information on other options
MobileRobot.RaspberryPiMouseRTC.config_file: RaspberryPiMouseRTC.conf

# The end of rtc.conf example
#------------------------------------------------------------ 


#----------------------------------------------------------------------
#
# RT-Component manager configuration reference
#
# Copyright (c) 2003-2020 by Noriaki Ando <n-ando@aist.go.jp>
#      National Institute of
#          Advanced Industrial Science and Technology (AIST), Japan
#
# This configuration and document file is licensed under
# a Creative Commons Attribution-ShareAlike 4.0 International License.
#
# You should have received a copy of the license along with this
# work. If not, see <http://creativecommons.org/licenses/by-sa/4.0/>.
#
# $Id$
#
# See details in the following reference manual on the web page.
# English reference:  https://openrtm.org/openrtm/en/rtc_conf_reference
# Japanese reference: https://openrtm.org/openrtm/ja/rtc_conf_reference
#
# Sections
# - Version related parameters
# - Naming options
# - Logger options
# - CORBA options
# - Manager's generic options
# - Manager's lifecycle options
# - Module management options
# - Manager's language support options
# - Manager's local service options
# - SSL Transport options
# - Timer options
# - Execution context options
# - SDO service options
# - Fluent-bit logger plugin options
#

#============================================================
# Version related parameters
#============================================================
#------------------------------------------------------------
# Configuration version (read-only) 
#
# This parameter is the configuration version that is set internally.
# Usually, it is the same as the version of OpenRTM-aist. It is
# unnecessary to set by rtc.conf. By reading out this parameter, it will
# tell you the version of rtc.conf that OpenRTM-aist assumes.
#
# - Setting: Read-only, no effect if it is set
# - Default: The version of current OpenRTM-aist configuration
# - Example:
#config.version: 2.0

#------------------------------------------------------------
# OpenRTM-aist name (read-only)
#
# This parameter is the name of OpenRTM-aist with version that is set
# internally. It is unnecessary to set by rtc.conf. By reading out this
# parameter, it will tell you the name of OpenRTM-aist with version.
#
# - Setting: Read-only, no effect if it is set
# - Default: The name of current OpenRTM-aist with version
# - Example:
#openrtm.name: OpenRTM-aist-2.0.0

#------------------------------------------------------------
# OpenRTM-aist version (read-only)
#
# This parameter is the version of OpenRTM-aist that is set internally.
# It is unnecessary to set by rtc.conf. By reading out this parameter, it will
# tell you the version of OpenRTM-aist.
#
# - Setting: Read-only, no effect if it is set
# - Default: The version of current OpenRTM-aist
# - Example:
#openrtm.version: 2.0.0

# End of version related parameters section
#============================================================

#============================================================
# Naming options
#============================================================
#------------------------------------------------------------
# Enable/Disable naming functions
#
# This option enables/disables the function related to the naming
# service. If YES is specified, the RTC reference is registered in the
# name service. If NO, no RTC reference is registered with the name
# service.
#
# - Setting: YES: registration on NS enable, NO: do nothing
# - Default: YES
# - Example:
#naming.enable: YES

#------------------------------------------------------------
# Naming Types
#
# This option specifies the name service type. Currently only "corba"
# and "manager" are supported. 
#
# - Setting: "corba", "manager"
# - Default: "corba"
# - Example:
#naming.type: corba

#------------------------------------------------------------
# Naming format
#
# The name format of components that is bound to naming services.
# The delimiter between names is "/".
# The delimiter between name and kind is ".".
#
# example: (OpenRTM-aist-0.2.0 style)
#       %h.host_cxt/%M.mgr_cxt/%c.cat_cxt/%m.mod_cxt/%n.rtc
# This is formatted according to the following replacement rules.
#
# %n: The instance name of the component.
# %t: The type name of the component.
# %m: The module name of the component.
# %v: The version of the component.
# %V: The component vendor.
# %c: The category of the component.
# %h: The hostname.
# %M: The manager name.
# %p: PID of the manager.
#
# - Setting: <name>.<kind>/<name>.<kind>/...
# - Default: %h.host/%n.rtc
# - Example:
#naming.formats: %h.host/%n.rtc

#------------------------------------------------------------
# Auto update to Naming Server
#
# Registration of the RTC to the name server is usually performed when
# the instance is created. Therefore, the name and its reference of the
# RTCs are not registered in the name server started after the RTC is
# instantiated. By specifying this option, the name server will be
# checked periodically, and if the startup of the name server is
# confirmed, the names and references of RTCs will be registered again.
#
# - Setting: YES or NO
# - Default: YES
# - Example:
#naming.update.enable: YES

#------------------------------------------------------------
# Update interval [s] for auto update
#
# This option specifies the name service type. Currently only corba and
# manager are supported.
#
# - Setting: Registration update period in seconds [s]
# - Default: 10.0 [s]
# - Example:
#naming.update.interval: 10.0

#------------------------------------------------------------
# Rebind references in auto update
#
# If YES is specified for this option, the names and references will be
# re-registered even if the name is deleted on the name server.
#
# - Setting: YES or NO
# - Default: NO
# - Example:
#naming.update.rebind: NO

# End of Naming options section
#============================================================

#============================================================
# Logger options
#============================================================
#------------------------------------------------------------
# Enable/Disable logger [YES/NO]
#
# This option specifies if enables the logger. 
#
# - Setting: YES or NO
# - Default: YES
# - Example:
#logger.enable: YES

#------------------------------------------------------------
# Log file name (default = ./rtc%p.log)
#
# Specify log file name. You can also output to multiple files separated
# by commas. A specifier %p to replace the process ID is available. If
# the file name is stdout, the log will be output to standard output.
#
# Replaceable strings:
# %p: PID
#
# - Setting: file names and/or "stdout"
# - Default: ./rtc%p.log
# - Example:
#logger.file_name: ./rtc%p.log, stdout

#------------------------------------------------------------
# Log date format (default = %b %d %H:%M:%S)
#
# This option specifies the date/time format to be written in the log.
# The following strftime(3)-like format specifiers are available.
# 
# %a abbreviated weekday name 
# %A full weekday name 
# %b abbreviated month name 
# %B full month name 
# %c the standard date and time string 
# %d day of the month, as a number (1-31) 
# %H hour, 24 hour format (0-23) 
# %I hour, 12 hour format (1-12) 
# %j day of the year, as a number (1-366) 
# %m month as a number (1-12).
#    Note: some versions of Microsoft Visual C++ may use values that range
#    from 0-11. 
# %M minute as a number (0-59) 
# %p locale's equivalent of AM or PM 
# %Q millisecond as a number (0-999) from ver 1.1
# %q microsecond as a number (0-999) from ver 1.1
# %S second as a number (0-59) 
# %U week of the year, sunday as the first day 
# %w weekday as a decimal (0-6, sunday=0) 
# %W week of the year, monday as the first day 
# %x standard date string 
# %X standard time string 
# %y year in decimal, without the century (0-99) 
# %Y year in decimal, with the century 
# %Z time zone name 
# %% a percent sign 
#  
# - Setting: Format with %{aAbBcdHIjmMpQqSUwWxXyYZ%} replace string
# - Default: %b %d %H:%M:%S.%Q
# - Example:
# logger.date_format: No                        // Not implemented
# logger.date_format: Disable                   // Not implemented
# logger.date_format: [%Y-%m-%dT%H.%M.%S%Z]     // W3C standard format
# logger.date_format: [%b %d %H:%M:%S]          // Syslog format
# logger.date_format: [%a %b %d %Y %H:%M:%S %Z] // RFC2822 format
# logger.date_format: [%a %b %d %H:%M:%S %Z %Y] // data command format
# logger.date_format: [%Y-%m-%d %H.%M.%S]
#logger.date_format: %b %d %H:%M:%S.%Q

#------------------------------------------------------------
# Log level (default = INFO)
#
# This option specifies the log level for logging. The following log
# levels are allowed.
#
# SILENT, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARANOID
#
# The log message levels that are output when each log level is
# specified are shown below.
#
# SILENT  : completely silent
# FATAL   : includes (FATAL)
# ERROR   : includes (FATAL, ERROR)
# WARN    : includes (FATAL, ERROR, WARN)
# INFO    : includes (FATAL, ERROR, WARN, INFO)
# DEBUG   : includes (FATAL, ERROR, WARN, INFO, DEBUG)
# TRACE   : includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE)
# VERBOSE : includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE)
# PARANOID: includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARA)
#
# Warning!!!
# "TRACE", "VERBOSE", "PARANOID" logging level will create a huge log file!!
# "PARANOID" log level will tangle the log file.
#
# - Setting: SILENT, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARANOID
# - Default: INFO
# - Example:
#logger.log_level: INFO

#------------------------------------------------------------
# Logger's clock time
#
# logger.clock_type option specifies a type of clock to be used for
# timestamp of log message. Now these three types are available.
#
# - system: system clock [default]
# - logical: logical clock
# - adjusted: adjusted clock
#
# To use logical time clock, call and set time by the following
# function in somewhere.
# coil::ClockManager::instance().getClock("logical").settime()
#
# - Setting: system, logical, adjusted
# - Default: system
# - Example:
#logger.clock_type: system

#------------------------------------------------------------
# Enable a function to set colors on terminal output
#
# This option specifies whether the log output will be colored. If
# logger.file_name: stdout is specified, the log output will be
# displayed in color if the terminal supports escape sequences. Coloring
# the output to files is not recommended.
#
# - Setting: YES or NO
# - Default: NO
# - Example:
#logger.escape_sequence_enable: NO

# End of logger options section
#============================================================

#============================================================
# CORBA options
#============================================================
# CORBA ORB's arguments
#
# This option specifies the argument given to CORBA. CORBA has different
# command line options depending on the implementation. Normally command
# line arguments are given to the CORBA API ORB_init() function, but
# this option passes the specified string to this ORB_init() function.
#
# Case study:
# When sending image data etc. through the data port, be careful if the
# size of the data sent at one time exceeds about 2 MB. In omniORB, the
# size that can be handled by giop (General Inter-ORB Protocol) is
# "2097152B (2MB)" by default, and if you try to send more data than
# this size, you cannot send the correct data due to giop's limitation.
# It is possible to change the maximum size by using the corba.args
# option. This specification must be specified for both OutPort and
# InPort.
# corba.args: -ORBgiopMaxMsgSize 3145728 # add this line to rtc.conf
#                                        # TMa buffer size is 3MB
#
# In addition to specifying in corba.args, you can relax this
# restriction by specifying environment variables as follows.
#
#  export ORBgiopMaxMsgSize=3145728
#
# - reference: omniORB configuration and API
#   http://omniorb.sourceforge.net/omni41/omniORB/omniORB004.html
#
# - Setting: CORBA specific command arguments
# - Default: None
# - Example:
# corba.args: -ORBInitialHost myhost -ORBInitialPort 8888
#corba.args:

#------------------------------------------------------------
# CORBA endpoints
#
# In CORBA, a remote object is accessed by a reference called IOR
# (interoperable object reference). Usually, only one set of the address
# and port number of the node on which the object operates is described
# in the IOR. When the node running OpenRTM has two or more network
# interfaces, an unintended address may be assigned as the address of
# the node included in IOR.
#
# To solve this, this option allows you to specify the network address
# used by CORBA. Specify as ''<host address>:<port number>'', but the
# port number can be omitted including colon ":".
#
# Depending on the ORB implementation, the IOR can contain multiple
# addresses. However, it should be noted that in Java IDL, which is the
# Java standard CORBA, there is a problem that the operation becomes
# slow when accessing the object via IOR that specifies multiple
# addresses.
#
# Multiple ''<host address>:<port number>'' pairs can be specified by
# separating them with'',(comma)''. You can also include all the node's
# addresses in the IOR by specifying "all'' as a special string.
#
# NOTE:
# The old option "corba.endpoint" will be obsolete near future,
# unrecommended.
#
# Examples:
#   corba.endpoints: myhost:      (use myhost and default port)
#   corba.endpoints: :9876        (use default addr and port 9876)
#   corba.endpoints: myhost:9876  (use myhost and port 9876)
#   corba.endpoints: 192.168.1.10:1111, 192.168.10.11:2222
#   corba.endpoints: 192.168.1.10, 192.168.10.11
#   corba.endpoints: all
#
# - Setting: <host_addr>:<port>, <host_addr>:<port>, ... or "all"
# - Default: None
# - Example:
#corba.endpoints: 192.168.1.10:1111, 192.168.10.11:2222
#corba.endpoints: 192.168.1.10, 192.168.10.11
#corba.endpoints: all

#------------------------------------------------------------
# CORBA IPv4 endpoints
#
# This parameter is read-only and sets the IPv4 endpoint used by the
# current process.　Reading this parameter will tell you which endpoint
# you are currently using.
#
# - Setting: Read-only
# - Default: None
# - Example:
#corba.endpoints_ipv4: [readonly]

#------------------------------------------------------------
# CORBA IPv6 endpoints
#
# This parameter is read-only and sets the IPv6 endpoint used by the
# current process.　Reading this parameter will tell you which endpoint
# you are currently using.
#
# - Setting: Read-only
# - Default: None
# - Example:
#corba.endpoints_ipv6: [readonly]

#------------------------------------------------------------
# Specify what kind of IP addresses will be set to corba.endpoints
#
# This option specifies which address of the available endpoints should
# be used as an IPv4 or IpV6 address.
#
# - Setting: {ipv4|ipv6}(<number of endpoint address>, ...), 
# - Default: None
# - Example:
# corba.endpoint_property: ipv4
# corba.endpoint_property: ipv4, ipv6(0)
# corba.endpoint_property: ipv6
# corba.endpoint_property: ipv4(0,1), ipv6(2,3)
#
#corba.endpoint_property:

#------------------------------------------------------------
# CORBA name server setting
#
# This option specifies the name server that registers RTC etc. You can
# specify multiple name servers separated by commas. Even if there is no
# name server at the specified address and port number, no error occurs
# and the RTC name is registered only in the existing name server. If
# the port number is omitted, the default port number 2809 will be used.
#
# - Setting: <nameserver address>:<port number>, ...
# - Default: localhost:2809
# - Example:
#   corba.nameservers: openrtm.aist.go.jp:9876
#   corba.nameservers: rtm0.aist.go.jp, rtm1.aist.go.jp, rtm2.aist.go.jp
#
#corba.nameservers: localhost

#------------------------------------------------------------
# IOR host address replacement by guessed endpoint from routing (experimental)
#
# This option replaces a host address with an endpoint that is guessed
# by route information to nameserver's address. This option may be
# effective for CORBA implementation that does not supports IOR's
# multiple profile or alternate IIOP address. However, since other
# object references that are obtained from RT-Components or other are
# not modified by this rule, other RTCs that are connected to this RTC
# have to also support IOR multiple profile feature.  When this option
# is used, corba.endpoints option should also be specified with
# multiple endpoints.
#
# - Setting: YES or NO
# - Default: NO
# - Example:
#corba.nameservice.replace_endpoint: NO

#------------------------------------------------------------
# IOR alternate IIOP addresses
#
# This option adds alternate IIOP addresses into the IOR Profiles.
# IOR can include additional endpoints for a servant. It is almost
# same as "corba.endpoints" option, but this option does not create
# actual endpoint on the ORB. (corba.endpoints try to create actual
# endpoint, and if it cannot be created, error will be returned.)
# This option just add alternate IIOP endpoint address information to
# an IOR.
#
# This option can be used when RTCs are located inside of NAT or
# router.  Generally speaking, RTCs in a private network cannot
# connect to RTCs in the global network, because global client cannot
# reach to private servants. However, if route (or NAT) is properly
# configured for port forwarding, global RTCs can reach to RTCs in
# private network.
#
# A setting example is as follows.
# 1) Configure your router properly for port-forwarding.
#    ex. global 2810 port is forwarded to private 2810
# 2) Set the following options in rtc.conf
#  corba.nameservers: my.global.nameserver.com <- name server in global network
#  corba.endpoints: :2810 <- actual port number
#  corba.additional_ior_addresses: w.x.y.z:2810 <- routers global IP addr/port
# 3) Launch global RTCs and private RTC, and connect them.
#
# - Setting: <address>:<port>
# - Default: None
# - Example:
#corba.alternate_iiop_addresses: addr:port

# End of CORBA options section
#============================================================

#============================================================
# Manager's generic options
#============================================================
#------------------------------------------------------------
# The name of manager (default = manager)
#
# This "manager.name" is used for grouping master-slave managers with
# stringfied CORBA object name. If the "manager.name" is set to
# "manager" and the manager is master, the object reference is located
# as follows.
#
# corbaloc::<hostname>:2810/manager 
#
# and other slave manager also has the following stringfied ior.
#
# corbaloc::<hostname>:<port_number>/manager
#
# - Setting: any string name of manager
# - Default: manager
# - Example:
#manager.name: manager

#------------------------------------------------------------
# The instance name of the manager (default = manager)
#
# This "manager.instance_name" is used for the name of the manager on
# the naming service registration. Usually, a master manager's reference
# is registered on name-servers with the name "manager|mgr". If this
# option is set to "foobar", the registered the master manager name
# will be "foobar|mgr".
#
# - Setting: any string name of manager
# - Default: manager
# - Example:
#manager.instance_name: manager

#------------------------------------------------------------
# Manager naming format
#
# The name format of manager that is bound to naming services.
# The delimiter between names is "/".
# The delimiter between name and kind is ".".
#
# This is formatted according to the following replacement rules.
#
# %n: The instance name of the manager.
# %h: The hostname.
# %M: The manager name.
# %p: PID of the manager.
#
# Setting: Read/Write, <name>.<context>/<name>.<context>...
# Default: %h.host_cxt/%n.mgr
# Example:
#manager.naming_formats: %h.host_cxt/%n.mgr

#------------------------------------------------------------
# Master manager or not
#
# This option specifies whether this process will be the master manager?
# If the command line option '''-d''' is specified, it will become the
# master manager even if this value is set to NO.
#
# - Setting: Read/Write, "YES" or "NO"
# - Default: NO
# - Example:
#manager.is_master: NO

#------------------------------------------------------------
# Creating master manager servant
#
# Setting whether to start the manager's CORBA servant. If set to YES,
# the manager's CORBA servant will be started, allowing remote manager
# operations. In the case of NO, the CORBA servant will not be started
# and the manager cannot operate via CORBA.
#
# - Setting: Read/Write, "YES" or "NO"
# - Default: YES
# - Example:
#manager.corba_servant: YES

#------------------------------------------------------------
# Master manager's location
#
# This option specifies the address and port number of the master
# manager used by the slave manager. The slave manager assumes the
# master manager specified here as its own master manager, accesses the
# master manager at startup, and performs negotiation. Slave managers
# and standalone components that are not launched directly by the master
# manager are managed by the master manager specified by this option.
#
# - Setting: Read/Write, <hostname or IP address>:<port_number>
# - Default: localhost:2810
# - Example:
#corba.master_manager: localhost:2810

#------------------------------------------------------------
# Auto update to Master Manager
#
# This option is valid in slave-manager. A Slave-manager must
# register itself to master managers. If this option is set to
# "YES", the slave manager make registration it to master manager
# periodically. If "NO" is set, the slave manager make registration
# itself to master managers once when it is started.
#
# - Setting: YES/NO (Read/Write)
# - Default: YES
# - Example:
#manager.update_master_manager.enable:YES

#------------------------------------------------------------
# Update interval [s] for auto update
#
# This option is related to corba.update_master_manager.enable.
# If "corba.update_master_manager.enable" option is set YES, update interval is set by this option. The default interval is 10 sec.
#
# - Setting: seconds (Read/Write)
# - Default: 10.0
# - Example:
#manager.update_master_manager.interval: 10.0

#------------------------------------------------------------
# Naming policy
#
# This option specifies a naming (numbering) policy for the RTCs.
# When an RTC instance is created, a name with the component type
# name (type_name) with an incremental number as follows is
# assigned.
#
# <type_name> <number> 
# ex. ConsoleOut0, ConsoleOut1, ConsoleOut2, ...
#
# By default, the same type components in the same process are
# numbered sequentially from 0, so RTCs created on different
# processes or on different nodes (computers) may have the same
# name. When these RTCs are registered on the name server (ns), RTCs
# with the same path and the same name overwrite each other's object
# references, and it becomes impossible to access the desired RTC.
# Therefore, two policies are provided: "node_unique", which assigns
# a unique number to each node, and "ns_unique", which assigns a
# unique number on the name server.
#
# The following three options can be specified by default.
#
# - process_unique: Give a unique name (number) within the process
# - node_unique: Give a unique name (number) within the node
# - ns_unique: Give a unique name (number) on the nameserver
#
# The policies can be extended by users.
#
# - Setting: Read/Write, {process_unique, node_unique, ns_unique}
# - Default: process_unique
# - Example:
#manager.components.naming_policy: process_unique

#------------------------------------------------------------
# Prior component creation
#
# This option specifies components' names (module name) creating in advance
# before starting the manager's event-loop. The components' factories should
# be registered by manager.module.preload option or statically linked to the
#  manager.
#
# - Setting: Read/Write, <component class name>, ...
# - Default: None
# - Example:
# manager.components.precreate: ConsoleIn, ConsoleOut, SeqIn, SeqOut
#
#manager.components.precreate: 

#------------------------------------------------------------
# Prior connection creation
#
# This option specifies the connector to create before starting the
# manager event loop. The target component and port must have been
# previously created with the "manager.components.precreate" option.
# Ports are specified in the format
# "<comp0>.<Port0>?port=<comp1>.<port1>&<option_key>=<option_value>&...".
# If no dataflow_type or interface_type is specified,
# "dataflow_type=push", "interface_type=corba_cdr" will be specified
# automatically.
#
# - Setting: <comp0>.<Port0>?port=<comp1>.<port1>&<option_key>=<option_value>&...
# - Default: none
# - Example:
# manager.components.preconnect: ConsoleIn.out?port=ConsoleOut.in& \
#                                dataflow_type=push&interface_type=corba_cdr,\
#                                SeqIn.octet?port=SeqOut.octet& \
#                                dataflow_type=push&interface_type=direct
#manager.components.preconnect: 

#------------------------------------------------------------
# Prior component activation
#
# This option specifies components' names (module name) to be
# activated in advance before starting the manager's event-loop. The
# target components should be created previously by
# manager.components.precreate optinos.
#
# Example:
# manager.components.preactivation: ConsoleIn0, ConsoleOut0
#
#manager.components.preactivation:

#------------------------------------------------------------
# Manager process's CPU affinity setting
#
# This option make the process bound to specific CPU(s).  Options must
# be one or more comma separated numbers to identify CPU ID.  CPU ID
# is started from 0, and maximum number is number of CPU core -1.  If
# invalid CPU ID is specified, all the CPU will be used for the
# process.
#
# - Setting: Read/Write, duration [s]
# - Default: 0.5
# - Example:
#   manager.cpu_affinity: 0, 1, 2, ...
#manager.cpu_affinity: 0

# End of Manager's generic options section
#============================================================

#============================================================
# Manager's lifecycle options
#============================================================
#------------------------------------------------------------
# Manager auto shutdown options
#
# This option specifies whether to shut-down the manager and
# terminate the process when there is no RTC on the process, that is
# when the last one of the RTC on the same process has terminated.
# If YES, the process terminates when no RTC is left. In the case of
# NO, both the manager and the process continue to operate even when
# there is no RTC.
#
# - Setting: Read/Write, YES/NO
# - Default: YES
# - Example:
#manager.shutdown_on_nortcs: YES

#------------------------------------------------------------
# Manager auto shutdown options
#
# If this option is set to YES, the process checks for the presence
# of an RTC at regular intervals, and if no RTC exists, shuts down
# the manager and the process. If NO, the manager and the processes
# continue to run without any RTC.
#
# The difference between "manager.shutdown_on_nortcs" and
# "manager.shutdown_auto" is the trigger of shutdown. The former
# trigger is the removal of the last RTC, while the latter trigger
# is the time specified by the "manager.auto_shutdown_duration"
# option.
#
# - Setting: Read/Write, YES/NO
# - Default: YES
# - Example:
#manager.shutdown_auto: YES

#------------------------------------------------------------
# Manager auto shutdown options
#
# This option specifies how often to check for the existence of RTCs
# in the process. The unit is seconds. If the above
# "manager.shutdown_auto" is set to YES, the process checks for RTC
# at the cycle set by this option.
#
# - Setting: Read/Write, duration [s]
# - Default: 10.0
# - Example:
#manager.auto_shutdown_duration: 10.0

#------------------------------------------------------------
# Manager termination wait time
#
# This option specifies the time between the terminate request to
# the manager and the actual termination thread starting execution.
# The unit is seconds. Usually, there is no need to specify or
# change this option. However, if another termination procedure is
# executed before the CORBA termination procedure ends normally and
# an exception occurs, adjusting this time may solve the problem.
#
# - Setting: Read/Write, duration [s]
# - Default: 0.5
# - Example:
#manager.termination_waittime: 0.5

# End of Manager's lifecycle options section
#============================================================

#============================================================
# Module management options
#============================================================
#------------------------------------------------------------
# Loadable module search path list
#
# Manager searches loadable modules from the specified search path list.
# Path list elements should be separated by comma.
# Path delimiter is '/' on UNIX, and '\\' on Windows
#
# - Setting: Module load path, <path1>, <path2>, ...
# - Default: ./
# - Example:
#   manager.modules.load_path: C:/Program Files/OpenRTM-aist,  \
#   			       C:\\Program Files\\OpenRTM-aist
#   manager.modules.load_path: /usr/lib, /usr/local/lib,       \
#   			       /usr/local/lib/OpenRTM-aist/libs
#manager.modules.load_path: ./

#------------------------------------------------------------
# Preload module list
#
# Manager can load loadable modules before starting up. Loadable
# modules, which is specified only as its file name, is searched in
# each module load path specified in the
# "manager.modules.load_path". If the
# "manager.modules.abs_path_allowed" option is YES, loadable file
# can be specified as full-path name.
#
# Module initialization function name is usually estimated as
# <module_base_name>Init from the module file name.  If the module
# file name is ConsoleIn.so, the initialization function name is set
# to "ConsleInInit." If you want to specify the initialization
# function name, the initialization function name in parenthesis
# after module file name can be specified, like as "Hoge.so
# (ConsoleInInit)".  File extensions such as ".so", ".dll", ".dylib"
# can be drop. If module file name without file extension is
# specified, an extension specified in property variable
# "manager.modules.C++.suffixes" is supplied.
#
# - Setting: <module_name>(.<extention>) (init_func_name), ...
# - Default: none
# - Example: 
#   manager.modules.preload: ConsoleIn.dll, ConsoleOut.dll // Win
#   manager.modules.preload: ConsoleIn.so, ConsoleOut.so // Linux
#   manager.modules.preload: Hoge.so (ConsoleInInit), ConsoleOut
# - Example: Specifing absolute path
#   manager.modules.abs_path_allowed: YES
#   manager.modules.preload: /usr/lib/OpenRTM-aist/ConsoleIn.so
#manager.modules.preload:

#------------------------------------------------------------
# Permission flag of absolute module path
#
# If this option is "YES", absolute path specification for the
# module is allowed. For the security reason, specifying modules to
# be loaded by the absolute path is not allowed by default. The
# modules to be loaded have to be deployed specified directories. If
# you want to specify loaded modules by absolute path during the
# development and debugging phase, you can use this option.
#
# - Setting: Read/Write, YES/ON
# - Default: NO
# - Example:
# manager.modules.abs_path_allowed: YES
#manager.modules.abs_path_allowed: NO

#------------------------------------------------------------
# Enable a module automatic search function
#
# This option specifies whether to automatically search for RTC
# loadable modules. If this option is set to "YES", when RTC
# instantiation is requested to the manager, the target RTC loadable
# module (DLL, so, etc.) is automatically searched and loaded from
# the module search path, and the component is instantiated. If NO,
# the target RTC's loadable module must be loaded in advance.
#
# - Setting: Read/Write, YES / NO
# - Default: YES
# - Example:
#manager.modules.search_auto: YES

#------------------------------------------------------------
# Module List to load before CORBA initialization
#
# This option specifies the module to load before CORBA
# initialization. A loadable module that implements some
# functionality must be loaded before CORBA initialization, and such
# a module is specified with this option. The module specification
# method is the same as for manager.modules.preload.
#
# - Setting: <module_name>(.<extention>) (init_func_name), ...
# - Default: none
# - Example: 
#   manager.preload.modules: SSLTransport.dll
#   manager.preload.modules: SSLTransport.py
#   manager.preload.modules: SSLTransport
#   manager.preload.modules: \
#   C:\\Python27\\Lib\\site-packages\\OpenRTM_aist\\ext\\SSLTransport
#manager.preload.modules: none

#------------------------------------------------------------
# The following options are not implemented yet. 
#
# manager.modules.config_ext:
# manager.modules.config_path:
# manager.modules.detect_loadable:
# manager.modules.init_func_suffix:
# manager.modules.init_func_prefix:
# manager.modules.download_allowed:
# manager.modules.download_dir:
# manager.modules.download_cleanup:

# End of Module management options section
#============================================================

#============================================================
# Manager's language support options
#============================================================
#------------------------------------------------------------
# Supported languages
#
# The master manager launches the slave manager and the RTCs in
# response to a request from a remote application. The slave manager
# is not only limited to the C++ language version, but maybe the
# Java version or Python version. This option sets the languages
# ​​supported by the master manager. The language name specified
# here is used for specifying options such as "manager.modules.
# <Language> .manager_cmd" below. For example, if "Lua" is specified
# for this option,
#
# - manager.modules.Lua.manager_cmd
# - manager.modules.Lua.profile_cmd
# - manager.modules.Lua.suffixes
# - manager.modules.Lua.load_paths
#
# If these options are correctly specified, the master manager will
# be able to start a Lua language's slave manager and Lua version
# RTCs. (Currently, Lua version does not support these functions.)
#
# Python means Python version 2 series, and Python3 means Python
# version 3 series.
#
# - Setting: Read/Write, C++, Python, Pyton3, Java
# - Default: C++, Python, Python3, Java
# - Example:
#manager.supported_languages: C++, Python3, Java

#------------------------------------------------------------
# Language specific module file extension
#
# This option specifies the extension of the loadable module RTC.
#   manager.modules. <lang> .suffixes
# The <lang> part of must be specified in
# manager.supported_languages. "."(Dot) is not required. Since the
# appropriate default extensions are specified for C++,
# Python/Python3 and Java languages respectively, usually no setting
# is required.
#
# - Setting: Extension of loadable module
# - Default:
#  - C ++: Windows: dll, Linux etc .: so, Mac OS X: dylib
#  - Python / Python3: py
#  - Java: class
# -Example
#  manager.modules.C ++. suffixes: dll
#  manager.modules.Python.suffixes: so
#  manager.modules.Java.suffixes: class
#manager.modules.<lang>.suffixes

#------------------------------------------------------------
# Language specific manager executable
#
# This option specifies the name of the manager executable for each
# language. When the master manager is requested to instantiate an
# RTC, the slave manager is executed and the RTC is instantiated on
# the slave manager process. The C++ version RTC uses the C++
# version manager (rtcd), and the Python version RTC uses the
# Python version manager (rtcd_python). The command search path
# default executables are specified for C++, Python/Python3 and
# Java languages respectively, usually no setting is required.
#
# - Setting: Manager command name
# - Default:
#  - C++: rtcd
#  - Python: rtcd_python
#  - Python3: rtcd_python3
#  - Java: rtc_java
# -Example
#manager.modules.<lang>.manager_cmd: rtcd_<lang_specific_suffix>
#manager.modules.C++.manager_cmd: rtcd
#manager.modules.Python.manager_cmd: rtcd_python
#manager.modules.Java.manager_cmd: rtcd_java

#------------------------------------------------------------
# Language specific profile executable
#
# This option specifies the name of the profile executable, which
# is a command to get RTC profile, for each language. When
# searching RTCs from the existing loadable modules, master manager
# execute profile command to get each components' profile from
# loadable modules. The C++ version RTC uses the C++ version
# profile command (rtcprof), and the Python version RTC uses the
# Python version manager (rtcprof_python). The command search path
# must be set for the specified executable. Since the appropriate
# default executables are specified for C++, Python/Python3 and
# Java languages respectively, usually no setting is required.
#
#
# - Setting: Profile command name
# - Default:
#  - C++: rtcprof
#  - Python: rtcprof_python
#  - Python3: rtcprof_python3
#  - Java: rtc_java
# - Example:
#manager.modules.<lang>.profile_cmd: rtcprof_<lang_specific_suffix>
#manager.modules.C++.profile_cmd: rtcprof
#manager.modules.Python.profile_cmd: rtcprof_python
#manager.modules.Python3.profile_cmd: rtcprof_python3
#manager.modules.Java.profile_cmd: rtcprof_java

#------------------------------------------------------------
# Language specific module load path
#
# This option specifies the load path of the loadable module RTC for
# each language. When master manager searching RTCs from somewhere,
# the specified load path is used.
#
# - Setting: RTC's module load path
# - Default: none
# - Example:
#manager.modules.<lang>.load_path: <lang_specific_module_load_path>
#manager.modules.C++.load_path: ./, /usr/share/openrtm-1.2/components/cxx
#manager.modules.Python.load_path: ./, /usr/share/openrtm-1.2/components/python
#manager.modules.Python3.load_path: ./, /usr/share/openrtm-1.2/components/python3
#manager.modules.Java.load_path: ./, /usr/share/openrtm-1.2/components/java

# End of Manager's language spport options section
#============================================================


#============================================================
# Timer options
#============================================================
#------------------------------------------------------------
# Enable/disable timer function
#
# This option enables or disables the timer function. If it is set NO
# the functions that use the timer is disabled, such as periodic
# confirmation and re-registration of the name server.
#
# - Setting: Read/Write, YES or NO
# - Default: YES
# - Example:
#timer.enable: YES

#------------------------------------------------------------
# Timer clock tick setting [s]
#
# This option specifies the resolution of the timer. For example, if you
# specify this option as 1 second, you cannot control the timer
# execution with a resolution greater than 1 second.
#
# - Setting: Read/Write, seconds[s]
# - Default: 0.1 [s]
# - Example:
#timer.tick: 0.1

# End of Timer options section
#============================================================

#============================================================
# Execution context options
#============================================================
#
#------------------------------------------------------------
# Periodic type ExecutionContext
#
# Other availabilities in OpenRTM-aist
#
# - ExtTrigExecutionContext:   External triggered EC. It is embedded in
#                              OpenRTM library.
# - OpenHRPExecutionContext:   External triggred paralell execution
#                              EC. It is embedded in OpenRTM
#                              library. This is usually used with
#                              OpenHRP3.
# - SimulatorExecutionContext: External triggred paralell execution
#                              EC. It is embedded in OpenRTM
#                              library. This is usually used with
#                              Choreonoid.
# - RTPreemptEC:               Real-time execution context for Linux
#                              RT-preemptive pathed kernel.
# - ArtExecutionContext:       Real-time execution context for ARTLinux
#                              (http://sourceforge.net/projects/art-linux/)
#
# - Setting: (Periodic|ExtTrig|OpenHRP~Simulator~RTPreemptExecutionContext)
# - Default: PeriodicExecutionContext
# - Example:
#exec_cxt.periodic.type: PeriodicExecutionContext
# exec_cxt.event_driven_type: to be implemented

#------------------------------------------------------------
# The execution cycle of ExecutionContext
#
# This option specifies the system wide EC's period. If RTC does not
# specifies EC's periodic rate, this periodic rate will be used.
#
# - Setting: Read/Write, period [Hz]
# - Default: 1000 [Hz]
# - Example:
#exec_cxt.periodic.rate: 1000

#------------------------------------------------------------
# State transition mode settings YES/NO
#
# Default: YES (Default setting is recommended.)
#
# Activating, deactivating and resetting of RTC makes state
# transition.  Some execution contexts execute main logic in different
# thread.  If these flags set to YES, activation, deactivation and
# resetting will be performed synchronously.  In other words, if these
# flags are YES, activation/deactivation/resetting-operations must be
# returned after state transition completed.
#
# "synchronous_transition" will set synchronous transition flags to
# all other synchronous transition flags
# (synchronous_activation/deactivation/resetting.
#
#exec_cxt.sync_transition: YES
#exec_cxt.sync_activation: YES
#exec_cxt.sync_deactivation: YES
#exec_cxt.sync_reset: YES

#------------------------------------------------------------
# Timeout of synchronous state transition [s]
#
# Default: 1.0 [s]
#
# When synchronous transition flags are set to YES, the following
# timeout settings are valid. If "transition_timeout" is set, the
# value will be set to all other timeout of activation/deactivation
# and resetting
#
#exec_cxt.transition_timeout: 0.5
#exec_cxt.activation_timeout: 0.5
#exec_cxt.deactivation_timeout: 0.5
#exec_cxt.reset_timeout: 0.5

# End of Execution context settings
#============================================================

#============================================================
# SDO service options
#============================================================
#------------------------------------------------------------
# SDO service provider settings
#
# This parameter contains a list of currently available SDO services
# (providers).
#
# - Setting: Read-only, available SDO services (provider)
# - Default: None
# - Example:
#sdo.service.provider.available_services: [read only]

#------------------------------------------------------------
# SDO service provider settings
#
# This option effectively specifies the SDO service (provider). Specify
# a specific service by service type name, or specify "ALL" to enable
# all services.
#
# - Setting: Read-Write, <sdo service0>, <sdo service1>, ... or ALL
# - Default: None
# - Example:
#sdo.service.provider.enabled_services: ALL

#------------------------------------------------------------
# SDO service provider settings
#
# This option contains the currently instantiated and provided SDO
# service (provider).
#
# - Setting: Read-only, providing SDO services (provider)
# - Default: None
# - Example:
#sdo.service.provider.providing_services: [read only]

#------------------------------------------------------------
# SDO service provider settings
#
# This parameter contains a list of currently available SDO services
# (consumers).
#
# - Setting: Read-only, available SDO services (consumer)
# - Default: None
# - Example:
#sdo.service.consumer.available_services: [read only]

#------------------------------------------------------------
# SDO service provider settings
#
# This option specifies the SDO service (consumer) to use. Specify a
# specific service by service type name, or specify "ALL" to enable all
# services.
#
# - Setting: Read-Write, <sdo service0>, <sdo service1> , ... or ALL 
# - Default: ALL
# - Example:
#sdo.service.consumer.enabled_services: ALL

# End of SDO service options section
#============================================================

#============================================================
# Manager's local service options
#============================================================
#------------------------------------------------------------
# Loading local service modules
#
# Local service mechanisms are provided for services provided among
# components in the same process. Components can obtain and utilize
# local services from the manager. By using this mechanism components
# can share resources each other.
#
# Local service modules sometimes must be initialized before component
# module loading and initialization. Loadable modules which is
# specified in this option are previously loaded and initialized.
#
#manager.local_service.modules: IEEE1394CameraService.so

#------------------------------------------------------------
# Specifying enabled local services
#
# All the loaded local service modules are activated and enabled in
# default.  This option specify local serivces to be enabled when
# manager enables local services.
#
#manager.local_service.enabled_services: IEEE1394CameraService

# End of Manager's local service options section
#============================================================

#============================================================
# SSL Transport configurations
#============================================================
#
# corba.ssl.certificate_authority_file: root.crt
# corba.ssl.key_file: server.pem
# corba.ssl.key_file_password: password
# corba.args:-ORBclientTransportRule "* ssl, tcp"

# End of SSL Transport options section
#============================================================

#============================================================
# Fluent-bit logger plugin setting
#============================================================
#
# This is fluentbit logger plugin example in rtc.conf
#
#logger.enable: YES
#logger.log_level: PARANOID
#logger.file_name: rtc%p.log, stderr

# fluentbit specific configurations
#logger.plugins: FluentBit.so

# Output example (forward)
#logger.logstream.fluentd.output0.plugin: forward
#logger.logstream.fluentd.output0.tag: fluent_forward
#logger.logstream.fluentd.output0.match: *
#logger.logstream.fluentd.output0.host: 127.0.0.1 (default)
#logger.logstream.fluentd.output0.port: 24224 (default)

# Output example (stdout)
#logger.logstream.fluentd.output1.plugin: stdout
#logger.logstream.fluentd.output1.tag: fluent_stdout
#logger.logstream.fluentd.output1.match: *

# Input example (CPU)
#logger.logstream.fluentd.input0.plugin: cpu
#logger.logstream.fluentd.input0.tag: fluent_cpu

# Option example
#logger.logstream.fluentd.option.Flush: 5 (default)

# End of fluent-bit logger plugin options section
#============================================================
